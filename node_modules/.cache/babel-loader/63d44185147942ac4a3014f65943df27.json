{"ast":null,"code":"var _jsxFileName = \"/Users/suya/Desktop/front end study/webProjects/showlocalweather/src/App.js\";\nimport React, { Component } from 'react';\nimport Weather from './Components/Weather';\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\"; // import DegreeToggle from './Components/DegreeToggle';\n\nconst API_key = \"eb1bf46af9d73715c31e3645e772dd3c\"; // api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.updateForecastDegree = event => {\n      this.setState({\n        degreeType: event.target.value\n      });\n    };\n\n    this.state = {\n      isLoading: false,\n      degreeType: 'celsius',\n      city: null,\n      icon: null,\n      country: null,\n      temp: null,\n      temp_min: null,\n      temp_max: null,\n      feelslike: null,\n      description: null,\n      error: \"\"\n    }; // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({\n          icon: icons.Thunderstorm\n        });\n        break;\n\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({\n          icon: icons.Drizzle\n        });\n        break;\n\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({\n          icon: icons.Rain\n        });\n        break;\n\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({\n          icon: icons.Snow\n        });\n        break;\n\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({\n          icon: icons.Atmosphere\n        });\n        break;\n\n      case rangeID === 800:\n        this.setState({\n          icon: icons.Clear\n        });\n        break;\n\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({\n          icon: icons.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds\n        });\n    }\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(position => {\n      this.fetchWeather(position.coords.latitude, position.coords.longitude);\n    }, error => {\n      this.setState({\n        error: 'Error Getting Weather Conditions'\n      });\n    });\n  }\n\n  fetchWeather(lat = 25, lon = 25) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${API_key}&units=metric`).then(res => res.json()).then(json => {\n      this.setState({\n        city: json.name,\n        country: json.sys.country,\n        temp: this.calCelsius(json.main.temp),\n        temp_min: this.calCelsius(json.main.temp_min),\n        temp_max: this.calCelsius(json.main.temp_max),\n        feelslike: this.calCelsius(json.main.feels_like),\n        description: json.weather[0].description,\n        isLoading: false\n      });\n      this.getWeatherIcon(this.weatherIcon, json.weather[0].id);\n      console.log(json);\n    });\n  }\n\n  calCelsius(temp) {\n    return Math.floor(temp);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Weather, {\n      Clicked: this.updateForecastDegree,\n      city: this.state.city,\n      country: this.state.country,\n      temp: this.state.temp,\n      temp_min: this.state.temp_min,\n      temp_max: this.state.temp_max,\n      feels_like: this.state.feelslike,\n      description: this.state.description,\n      icon: this.state.icon,\n      degreeType: this.state.degreeType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/suya/Desktop/front end study/webProjects/showlocalweather/src/App.js"],"names":["React","Component","Weather","API_key","App","constructor","updateForecastDegree","event","setState","degreeType","target","value","state","isLoading","city","icon","country","temp","temp_min","temp_max","feelslike","description","error","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getWeatherIcon","icons","rangeID","componentDidMount","navigator","geolocation","getCurrentPosition","position","fetchWeather","coords","latitude","longitude","lat","lon","fetch","then","res","json","name","sys","calCelsius","main","feels_like","weather","id","console","log","Math","floor","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Weather from './Components/Weather';\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\n// import DegreeToggle from './Components/DegreeToggle';\n\nconst API_key = \"eb1bf46af9d73715c31e3645e772dd3c\";\n// api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      degreeType: 'celsius',\n      city: null,\n      icon: null,\n      country: null,\n      temp: null,\n      temp_min: null,\n      temp_max: null,\n      feelslike: null,\n      description: null,\n      error:\"\"\n    };\n    // this.getWeather();\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch(true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({icon: icons.Thunderstorm});\n        break;\n        case rangeID >= 300 && rangeID <= 321:\n        this.setState({icon: icons.Drizzle});\n        break;\n        case rangeID >= 500 && rangeID <= 531:\n        this.setState({icon: icons.Rain});\n        break;\n        case rangeID >= 600 && rangeID <= 622:\n        this.setState({icon: icons.Snow});\n        break;\n        case rangeID >= 701 && rangeID <= 781:\n        this.setState({icon: icons.Atmosphere});\n        break;\n        case rangeID === 800:\n        this.setState({icon: icons.Clear});\n        break;\n        case rangeID >= 801 && rangeID <= 804:\n        this.setState({icon: icons.Clouds});\n        break;\n        default: this.setState({icon: icons.Clouds});\n    }\n  }\n\n  componentDidMount() {\n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\tposition => {\n\t\t\t\tthis.fetchWeather(position.coords.latitude, position.coords.longitude);\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tthis.setState({\n\t\t\t\t\terror: 'Error Getting Weather Conditions'\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\tfetchWeather(lat = 25, lon = 25) {\n\t\tfetch(\n\t\t\t`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${API_key}&units=metric`\n\t\t)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n          city: json.name,\n          country: json.sys.country,\n          temp: this.calCelsius(json.main.temp),\n          temp_min: this.calCelsius(json.main.temp_min),\n          temp_max: this.calCelsius(json.main.temp_max),\n          feelslike: this.calCelsius(json.main.feels_like),\n          description: json.weather[0].description,\n\t\t\t\t\tisLoading: false\n        });\n        \n        this.getWeatherIcon(this.weatherIcon, json.weather[0].id)\n\n      console.log(json);\n      });\n  }\n  \n  updateForecastDegree = event => {\n    this.setState({\n      degreeType: event.target.value\n    })\n  }\n  \n  calCelsius(temp) {\n    return Math.floor(temp);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Weather Clicked={this.updateForecastDegree} city={this.state.city} country={this.state.country} temp={this.state.temp} temp_min={this.state.temp_min} temp_max={this.state.temp_max} feels_like={this.state.feelslike} description={this.state.description} icon={this.state.icon} degreeType={this.state.degreeType}  />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}