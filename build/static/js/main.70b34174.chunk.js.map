{"version":3,"sources":["Components/DegreeToggle.jsx","Components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["DegreeToggle","props","Fragment","name","id","value","onClick","Click","Weather","min","max","celsius","Math","round","temp","fahrenheit","console","log","className","city","country","Clicked","icon","degreeType","temp_min","temp_max","feels_like","description","API_key","App","updateForecastDegree","event","setState","target","state","isLoading","feelslike","error","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","this","navigator","geolocation","getCurrentPosition","position","fetchWeather","coords","latitude","longitude","lat","lon","fetch","then","res","json","sys","calCelsius","main","weather","getWeatherIcon","floor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70b34174.chunk.js","sourcesContent":["import React from 'react'\n\nconst DegreeToggle = (props) => {\n        return (\n            <React.Fragment>\n                <button name=\"degree-type\" id=\"celsius\" value=\"celsius\" onClick={props.Click}>&deg;C</button>\n                <button name=\"degree-type\" id=\"fahrenheit\" value=\"fahrenheit\" onClick={props.Click}>&deg;F</button>\n\n                {/* <button onClick={props.Click}>&deg;C</button>\n                <button onClick={props.Click}>&deg;F</button> */}\n            </React.Fragment>\n        )\n\n}\n\nexport default DegreeToggle;","import React from 'react';\nimport DegreeToggle from './DegreeToggle';\n\nconst Weather = (props) => {\n\n    const celsius = Math.round(props.temp);\n    const fahrenheit  = Math.round((9/5*celsius+32));\n\n    console.log(props);\n\n    return (\n        <div className=\"container\">\n            <div className=\"cards pt-4\">\n                <h1>{props.city}, {props.country}</h1>\n                <DegreeToggle Click={props.Clicked} />\n                <h5 className=\"py-4\">\n                    <i className={`wi ${props.icon} display-1`}></i>\n                </h5>\n                <h1 className=\"py-2\">Now: {props.degreeType === \"celsius\" ? celsius + \"°C\" : fahrenheit + \"°F\"}</h1>\n                {minmaxTemp(props.temp_min, props.temp_max)}\n                <h4 className=\"py-2\">Feels like: {props.feels_like}</h4>\n                <h4 className=\"py-4\">{props.description}</h4>\n            </div>\n        </div>\n    )\n}\n\nfunction minmaxTemp(min, max) {\nreturn(\n    <h3>\n        <span className=\"px-4\">Min: {min}&deg;</span>\n        <span className=\"px-4\">Max: {max}&deg;</span>\n    </h3>\n    \n)\n}\n\nexport default Weather;","import React, { Component } from 'react';\nimport Weather from './Components/Weather';\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\n// import DegreeToggle from './Components/DegreeToggle';\n\nconst API_key = \"eb1bf46af9d73715c31e3645e772dd3c\";\n// api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      degreeType: 'celsius',\n      city: null,\n      icon: null,\n      country: null,\n      temp: null,\n      temp_min: null,\n      temp_max: null,\n      feelslike: null,\n      description: null,\n      error:\"\"\n    };\n    // this.getWeather();\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  getWeatherIcon(icons, rangeID) {\n    switch(true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({icon: icons.Thunderstorm});\n        break;\n        case rangeID >= 300 && rangeID <= 321:\n        this.setState({icon: icons.Drizzle});\n        break;\n        case rangeID >= 500 && rangeID <= 531:\n        this.setState({icon: icons.Rain});\n        break;\n        case rangeID >= 600 && rangeID <= 622:\n        this.setState({icon: icons.Snow});\n        break;\n        case rangeID >= 701 && rangeID <= 781:\n        this.setState({icon: icons.Atmosphere});\n        break;\n        case rangeID === 800:\n        this.setState({icon: icons.Clear});\n        break;\n        case rangeID >= 801 && rangeID <= 804:\n        this.setState({icon: icons.Clouds});\n        break;\n        default: this.setState({icon: icons.Clouds});\n    }\n  }\n\n  componentDidMount() {\n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\tposition => {\n\t\t\t\tthis.fetchWeather(position.coords.latitude, position.coords.longitude);\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tthis.setState({\n\t\t\t\t\terror: 'Error Getting Weather Conditions'\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\tfetchWeather(lat = 25, lon = 25) {\n\t\tfetch(\n\t\t\t`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${API_key}&units=metric`\n\t\t)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n          city: json.name,\n          country: json.sys.country,\n          temp: this.calCelsius(json.main.temp),\n          temp_min: this.calCelsius(json.main.temp_min),\n          temp_max: this.calCelsius(json.main.temp_max),\n          feelslike: this.calCelsius(json.main.feels_like),\n          description: json.weather[0].description,\n\t\t\t\t\tisLoading: false\n        });\n        \n        this.getWeatherIcon(this.weatherIcon, json.weather[0].id)\n\n      console.log(json);\n      });\n  }\n  \n  updateForecastDegree = event => {\n    this.setState({\n      degreeType: event.target.value\n    })\n  }\n  \n  calCelsius(temp) {\n    return Math.floor(temp);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Weather Clicked={this.updateForecastDegree} city={this.state.city} country={this.state.country} temp={this.state.temp} temp_min={this.state.temp_min} temp_max={this.state.temp_max} feels_like={this.state.feelslike} description={this.state.description} icon={this.state.icon} degreeType={this.state.degreeType}  />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}